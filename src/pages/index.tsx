import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import Head from "next/head";
import {
  CUISINE_TYPE,
  type CuisineType,
  MEAL_TYPE,
  type MealType,
} from "~/pages/types/edamam";
import { type RecipeResponse } from "~/pages/api/edamam";

export default function Home() {
  const [mealType, setMealType] = useState<MealType>();
  const [cuisineType, setCuisineType] = useState<CuisineType>();

  const { data, isLoading, isError, refetch, error } = useQuery({
    queryKey: ["recipes"],
    queryFn: async () => {
      const response = await fetch(
        `/api/edamam?mealType=${mealType}&cuisineType=${cuisineType}`,
      );
      if (!response.ok) {
        // const error = (await response.json()) as unknown;
        throw new Error(response.statusText);
      }
      return (await response.json()) as RecipeResponse;
    },
    enabled: false,
    retry: false,
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <form
          className="mb-[10vh] mt-[15vh] flex gap-4"
          onSubmit={async (e) => {
            e.preventDefault();
            await refetch();
          }}
        >
          <select onChange={(e) => setMealType(e.target.value as MealType)}>
            <option selected disabled>
              Select Meal Type
            </option>
            {MEAL_TYPE.map((t, i) => (
              <option key={i} value={t}>
                {t}
              </option>
            ))}
          </select>

          <select
            onChange={(e) => setCuisineType(e.target.value as CuisineType)}
          >
            <option selected disabled>
              Select Cuisine Type
            </option>
            {CUISINE_TYPE.map((t, i) => (
              <option key={i} value={t}>
                {t}
              </option>
            ))}
          </select>

          <button
            className="rounded-lg bg-pink-500 px-6 py-3 font-sans text-xs font-bold uppercase text-white shadow-md shadow-pink-500/20 transition-all hover:shadow-lg hover:shadow-pink-500/40 focus:opacity-[0.85] focus:shadow-none active:opacity-[0.85] active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none"
            disabled={isLoading}
          >
            Search
          </button>
        </form>

        {isLoading && (
          <div className="h-8 w-8 animate-spin rounded-full border-4 border-solid border-white border-t-transparent" />
        )}

        {/* {data && (
          <ul className="overflow-hidden rounded border border-gray-200 shadow-md">
            {data.list?.map((item, i) => (
              <li
                key={i}
                className="border-b border-gray-200 bg-white px-4 py-2 transition-all duration-300 ease-in-out last:border-none hover:bg-sky-100 hover:text-sky-900"
              >
                {item}
              </li>
            ))}
          </ul>
        )} */}

        {isError && (
          <p className="border-b border-gray-200 bg-white px-4 py-2 transition-all duration-300 ease-in-out last:border-none hover:bg-sky-100 hover:text-sky-900">
            {error.message}
          </p>
        )}
      </main>
    </>
  );
}
